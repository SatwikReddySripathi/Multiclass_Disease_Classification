name: Model Training and Storage Pipeline
on:
  push:
    branches:
      - dheeraj_model
  pull_request:
    branches:
      - dheeraj_model
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
  IMAGE_NAME: "ml-model-image"
  REGISTRY: "us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/ml-models-new"
  GCS_BUCKET: "nih-dataset-mlops"

jobs:
  model_pipeline:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Clean up Docker
        run: docker system prune -af --volumes

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: "${{ secrets.GCP_SA_KEY }}"

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker us-east1-docker.pkg.dev --quiet

      - name: Create Temporary GCP Key File
        run: |
          mkdir -p app
          cp -r model app/
          echo '${{ secrets.GCP_SA_KEY }}' | jq '.' > app/gcp-key.json
          # Validate the JSON
          cat app/gcp-key.json | jq '.'

      - name: Debug GCP Key
        run: |
         echo "Checking GCP key file:"
         ls -l app/gcp-key.json
         echo "File contents:"
         cat app/gcp-key.json | jq '.' || echo "Invalid JSON"

      - name: Build and Push Docker Image
        run: |
          echo "Building Docker image..."
          docker build -f Dockerfilemodel -t $REGISTRY/$IMAGE_NAME:latest .
          echo "Pushing image to Artifact Registry..."
          docker push $REGISTRY/$IMAGE_NAME:latest

      - name: Run Model Training Script
        run: |
          echo "Starting model training..."
          docker run --rm \
          -v $(pwd)/app:/app \
          -e GOOGLE_APPLICATION_CREDENTIALS=/app/gcp-key.json \
          $REGISTRY/$IMAGE_NAME:latest \
          python model/final_model.py
          echo "Model training completed."

      - name: Upload Model to GCS
        run: |
          echo "Uploading model to GCS..."
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          if [ -f ./model_output/best_model.pth ]; then
            gsutil cp .app/model_output/best_model.pth gs://$GCS_BUCKET/models/best_model-$TIMESTAMP.pth
            gsutil cp .app/model_output/best_model.pth gs://$GCS_BUCKET/models/best_model-latest.pth
            echo "Model uploaded successfully."
          else
            echo "Error: Model file not found at ./model_output/best_model.pth"
            exit 1
          fi

      - name: Notify on Success
        if: success()
        run: |
          echo "✅ Pipeline completed successfully:"
          echo "- Model trained"
          echo "- Model uploaded to GCS bucket: $GCS_BUCKET"
          echo "- Docker image pushed to: $REGISTRY/$IMAGE_NAME:latest"

      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Pipeline failed:"
          echo "- Check the logs above for detailed error messages"
          echo "- Verify GCP permissions and credentials"
          echo "- Ensure all required services are enabled"

      - name: Cleanup
        if: always()
        run: |
          echo "Performing cleanup..."
          rm -f /app/gcp-key.json
          docker system prune -af --volumes
          echo "Cleanup completed."
