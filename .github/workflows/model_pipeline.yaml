name: Model Training and Storage Pipeline

on:
  push:
    branches:
      - dheeraj_model
  pull_request:
    branches:
      - dheeraj_model
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}  # Your GCP Project ID
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}          # Your GCP Service Account Key
  IMAGE_NAME: "ml-model-image"                    # Docker image name
  REGISTRY: "us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/ml-models"
  GCS_BUCKET: "nih-dataset-mlops"                 #  GCS bucket name

jobs:
  model_pipeline:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # Step 2: Clean up Docker resources to free up space
      - name: Clean up Docker
        run: docker system prune -af --volumes

      # Step 3: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 4: Login to GCP Artifact Registry
      - name: Login to GCP Artifact Registry
        uses: docker/login-action@v1
        with:
          registry: us-central1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      # Step 5: Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          docker build -f Dockerfilemodel -t $REGISTRY/$IMAGE_NAME:latest .
          docker push $REGISTRY/$IMAGE_NAME:latest

      # Step 6: Run Model Training Script and Save Model
      - name: Run Model Training Script
        run: |
          docker run --rm -v $(pwd):/app $REGISTRY/$IMAGE_NAME:latest python model/model_training_hyperparameters.py

      # Step 7: Authenticate with GCP
      - name: Authenticate with GCP
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json
          gcloud config set project $GCP_PROJECT_ID



      # Step 8: Push Model File to GCS Bucket
      - name: Upload Model to GCS
        run: |
          gsutil cp model.pkl gs://$GCS_BUCKET/models/model-$(date +%Y%m%d%H%M%S).pkl

      # Step 9: Notify on Success
      - name: Notify on Success
        if: success()
        run: echo "Model training and storage completed successfully."

      # Step 10: Notify on Failure
      - name: Notify on Failure
        if: failure()
        run: echo "Model training or storage failed."
