name: Model Pipeline v1

on:
  push:
    branches:
      - dheeraj_model
  pull_request:
    branches:
      - dheeraj_model
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # Your GCP Project ID
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }} # The service account key stored as a secret
  IMAGE_NAME: "hello-world-image"
  REGISTRY: "us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/ml-models"

jobs:
  model_pipeline:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt


      # Step 4: Login to GCP Artifact Registry
      - name: Login to GCP Artifact Registry
        uses: docker/login-action@v1
        with:
          registry: us-central1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}
        
      # Step 5: Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          docker build -f Dockerfilemodel -t $REGISTRY/$IMAGE_NAME:latest .
          docker push $REGISTRY/$IMAGE_NAME:latest

      # Step 6: Run Model with Raytuner from Docker Image
      - name: Run Model development file
        run: |
          docker run --rm $REGISTRY/$IMAGE_NAME:latest python model/model_development_refined.py

      - name: Notify on success
        if: success()
        run: echo "Unit tests passed successfully"

      - name: Notify on failure
        if: failure()
        run: echo "Unit tests failed"

      # - name: Set up Python
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: "3.8"

      # - name: Install Dependencies
      #   run: |
      #     python -m pip install --upgrade pip
      #     pip install -r requirements.txt

      # - name: Run Model Training Script
      #   env:
      #     GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      #   run: |
      #     python train_model.py

      # - name: Validate Model
      #   run: |
      #     python validate_model.py

      # - name: Check Validation Results
      #   run: |
      #     ACCURACY=$(jq .accuracy validation_metrics.json)
      #     if (( $(echo "$ACCURACY < 0.85" | bc -l) )); then
      #       echo "Model validation failed!"
      #       exit 1
      #     fi

      # - name: Run Bias Detection
      #   run: |
      #     python detect_bias.py

      # - name: Check Bias Results
      #   run: |
      #     BIAS=$(jq .bias_score bias_metrics.json)
      #     if (( $(echo "$BIAS > 0.2" | bc -l) )); then
      #       echo "Significant bias detected!"
      #       exit 1
      #     fi

      # - name: Push Model to Artifact Registry
      #   run: |
      #     gcloud auth activate-service-account --key-file=$GCP_CREDENTIALS
      #     gsutil cp model.pkl gs://my-model-bucket/models/model-$(date +%Y%m%d%H%M%S).pkl

      # - name: Notify on Slack
      #   uses: slackapi/slack-github-action@v1.23
      #   with:
      #     payload: |
      #       {
      #         "channel": "#mlopsgrp10",
      #         "text": "Model training pipeline completed with status ${{ job.status }}."
      #       }
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      # - name: Compare with Previous Model
      #   run: |
      #     python compare_models.py

      # - name: Rollback if New Model is Worse
      #   if: failure()
      #   run: |
      #     gsutil cp gs://my-model-bucket/models/previous_model.pkl model.pkl
